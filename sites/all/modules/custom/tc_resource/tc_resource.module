<?php

/**
 * Implements hook_field_formatter_info().
 */
function tc_resource_field_formatter_info() {
  return array(
    'field_date_new' => array(
      'label' => t('TC: Display "NEW" if less than 3 months ago'),
      'field types' => array('datetime'),
    ),
    'field_media_type_icon' => array(
      'label' => t('TC: Display media type icon'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'field_publication_type_icon' => array(
      'label' => t('TC: Display publication type icon'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'field_resourc_topics_display' => array(
      'label' => t('TC: Display resource topics'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'field_download_resource' => array(
      'label' => t('TC: Display resource + icon'),
      'field types' => array('file'),
    ),
    'field_external_link' => array(
      'label' => t('TC: Display external link + icon'),
      'field types' => array('link_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tc_resource_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'field_date_new':
      foreach ($items as $delta => $item) {
        $date_received = strtotime($item['value']);
        // If the $date received is less than 92 days (3 months) ago, show the "NEW", else show nothing.
        if ((time() - $date_received) < (92 * 24 * 60 *60)) {
          $element[$delta] = array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => array(
              'class' => array('sm', 'label', 'label-warning'),
            ),
            '#value' => t('NEW'),
          );
        }
      }
      break;

    case 'field_media_type_icon':
      $media_types = array(
        1518 => array('tooltip' => 'Document', 'icon_path' => 'file-text.svg'),
        1519 => array('tooltip' => 'Dataset', 'icon_path' => 'bar-chart-o.svg'),
        1471 => array('tooltip' => 'Online Course/Webinar', 'icon_path' => 'desktop.svg'),
        1469 => array('tooltip' => 'Audio', 'icon_path' => 'file-audio-o.svg'),
        1470 => array('tooltip' => 'Video', 'icon_path' => 'file-video-o.svg'),
        1472 => array('tooltip' => 'Web site', 'icon_path' => 'link.svg'),
      );

      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<a href="#" data-toggle="tooltip" title="" data-original-title="' . $media_types[$item['tid']]['tooltip'] . '"><img src="/' . drupal_get_path('module', 'tc_resource') . '/img/' . $media_types[$item['tid']]['icon_path'] . '" alt="' . $media_types[$item['tid']]['tooltip'] . '"></a>',
        );
      }
      break;

    case 'field_publication_type_icon':
      // Display the icon if the publication type is "Think College Publication" or one of its children.
      $tc_publication_tid = 1504;
      foreach ($items as $delta => $item) {
        $parents = taxonomy_get_parents($item['tid']);
        if (($item['tid'] == 1504) || (isset($parents[1504]))) {
          $element[$delta] = array(
            '#markup' => '<a href="#" data-toggle="tooltip" title="" data-original-title="Think College Publication"><img src="/' . drupal_get_path('module', 'tc_resource') . '/img/parthenon_new.svg" alt="Think College Publication"></a>',
          );
        }
      }
      break;

    case 'field_resourc_topics_display':
      // Display each term and its parent as links.
      foreach ($items as $delta => $item) {
        $markup = '';
        $term = taxonomy_term_load($item['tid']);
        $parents = taxonomy_get_parents($item['tid']);
        if (count($parents)) {
          foreach($parents as $key => $value) {
            $markup .= '<span class="topic-mainlabel">' . l($value->name, 'taxonomy/term/' . $value->tid) . '</span> &gt; ';
          }
        }
        $markup .= l($term->name, 'taxonomy/term/' . $term->tid);
        $element[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    case 'field_download_resource':
      foreach ($items as $delta => $item) {
        if ($item['description'] == "") $item['description'] = $item['filename'];
        switch ($item['filemime']) {
          case 'application/pdf':
            $icon = 'file-pdf-o.svg';
            break;
          case 'application/msword':
          case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            $icon = 'file-word-o.svg';
            break;
          case 'application/vnd.ms-excel':
          case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
            $icon = 'file-excel-o.svg';
            break;
          case 'application/vnd.ms-powerpoint':
          case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
            $icon = 'file-powerpoint-o.svg';
            break;
          case 'image/gif':
          case 'image/png':
          case 'image/jpg':
          case 'image/jpeg':
            $icon = 'file-image-o.svg';
            break;
          case 'text/html':
            $icon = 'file-code-o.svg';
            break;
          case 'text/plain':
          case 'text/rtf':
          case 'application/vnd.oasis.opendocument.text':
          case 'application/x-vnd.oasis.opendocument.text':
            $icon = 'file-text-o.svg';
            break;
          case 'audio/mpeg':
          case 'audio/*':
          case 'audio/ogg':
          case 'video/mp4':
            $icon = 'file-audio-o.svg';
            break;
          default:
          case 'application/rdf+xml':
          case 'application/octet-stream':
            $icon = 'file-o.svg';
            break;
        }
        $markup  = '<div class="field-item">';
        $markup .=   '<div class="tc-resource-icon"><img src="/' . drupal_get_path('module', 'tc_resource') . '/img/' . $icon . '" alt="Download resource"></div>';
        $markup .=   '<div class="tc-resource-info">';
        $markup .=     '<div class="tc-resource-description">' . l($item['description'], file_create_url($item['uri']), array('attributes' => array('target' => '_blank'))) . '</div>';
        //$markup .=     '<div class="tc-resource-date">' . format_date($item['timestamp'], 'custom', 'F j, Y') . '</div>';
        $markup .=   '</div>';
        $markup .= '</div>';

        $element[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    case 'field_external_link':
      foreach ($items as $delta => $item) {
        $markup  =   '<div class="tc-resource-icon"><img src="/' . drupal_get_path('module', 'tc_resource') . '/img/external-link.svg" alt="Go to resource"></div>';
        $markup .=   '<div class="tc-resource-info">';
        $markup .=     '<div class="tc-resource-description">' . l($item['title'], $item['url'], array('html' => true, 'attributes' => array('target' => '_blank'))) . '</div>';
        $markup .=   '</div>';

        $element[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;
  }

  return $element;
}



/**
 * Implements hook_block_info().
 */
function tc_resource_block_info() {
  $blocks = array();

  $blocks['tc_resource_find'] = array(
    'info' => t('TC Resource: Find a Resource'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tc_resource_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'tc_resource_find':
      $block['subject'] = t('Find a Resource');
      $block['content'] = drupal_get_form('_tc_resource_find_block');
      break;
  }

  return $block;
}

function _tc_resource_find_block() {
  $form['search_api_views_fulltext'] = array(
    '#type' => 'textfield',
    //'#title' => t('Search'),
    '#attributes' => array(
      'placeholder' => t('SEARCH'),
    ),
  );

  module_load_include('inc', 'field_ui', 'field_ui.admin');
  $entity_type = 'node';
  $bundle = 'resource';
  $field_name = 'field_resourc_topics';
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $form_state = array();
  $form += field_ui_default_value_widget($field, $instance, $form, $form_state);
  $form[$field_name]['und']['#multiple'] = FALSE;
  $form[$field_name]['und']['#title'] = t('Topic');
  $form[$field_name]['und']['#options']['_none'] = t('Select Topic...');

  $field_name = 'field_resourc_media_types';
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $form_state = array();
  $form += field_ui_default_value_widget($field, $instance, $form, $form_state);
  $form[$field_name]['und']['#multiple'] = FALSE;
  $form[$field_name]['und']['#title'] = t('Media type');
  $form[$field_name]['und']['#options']['_none'] = t('Select Media Type...');

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 99,
  );

  return $form;
}

function _tc_resource_find_block_submit($form, &$form_state) {
  $query_parameters = array();

  if ($form_state['values']['search_api_views_fulltext'] != '') {
    $query_parameters['search_api_views_fulltext'] = $form_state['values']['search_api_views_fulltext'];
  };

  if ($form_state['values']['field_resourc_topics'][LANGUAGE_NONE][0]['tid'] != '') {
    $query_parameters['f'][] = 'field_resourc_topics:' . $form_state['values']['field_resourc_topics'][LANGUAGE_NONE][0]['tid'];
  };

  if ($form_state['values']['field_resourc_media_types'][LANGUAGE_NONE][0]['tid'] != '') {
    $query_parameters['f'][] = 'field_resourc_media_types:' . $form_state['values']['field_resourc_media_types'][LANGUAGE_NONE][0]['tid'];
  };

  $options = array();
  $options['query'] = $query_parameters;
  drupal_goto('resource-search', $options);
}
