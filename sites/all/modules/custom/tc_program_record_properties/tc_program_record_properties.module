<?php

/**
 * @ file
 * Additional custom Entity properties to be indexed into Solr
 * for better search API facets.
 *
 * Author: Lee Walker
 * lee@codejourneymen.com
 */

/**
 * Implements hook_entity_property_info_alter().
 *
 * Add extra properties to document CT to allow for Solr to index
 * in sortable values.
 *
 * This has expanded to add a String title - so it's sortable alphabetically.
 * The previous title is indexed as 'fulltext', so not sortable.
 *
 * Also any Taxonomy terms need a property so they can be searched for by the name
 * in a textual search - not just a facet.
 */
function tc_program_record_properties_entity_property_info_alter(&$info) {
  /*
   * Add an extra field for all authors combined into a single string to some
   * bundles/CT's.
   * Solr will index this, and allow it to be sorted on first character.
   */
  if (isset($info['node']['bundles'])) {
    // For each content type.
    foreach ($info['node']['bundles'] as $bundle_type => $bundle) {
      // Put an extra title for alphabetical sort (ie not fulltext)
      $info['node']['bundles'][$bundle_type]['properties']['tc_alpha_sortable_title'] = array(
        'type' => 'text',
        'label' => 'TC:Alphabetically Sortable Title',
        'sanitized' => TRUE,
        'getter callback' => 'tc_program_record_properties_property_alpha_sort_title',
      );
      // Created Date sortable - as unix timestamp
      $info['node']['bundles'][$bundle_type]['properties']['tc_sortable_created_date'] = array(
        'type' => 'date',
        'label' => 'TC:Sortable Created Date',
        'sanitized' => TRUE,
        'getter callback' => 'tc_program_record_properties_property_sort_created_date',
      );

      switch ($bundle_type) {
        case 'program_record':
          /*
           * Housing has a yes-no-N/A, and we just want yes/no.
           * No & N/A are No.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_housing'] = array(
            'type' => 'text',
            'label' => 'TC:Housing',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_housing',
          );
          /*
           * Financial Aid has a yes-no-N/A-kinda/maybe, and we just want yes/no.
           * No & N/A & kinda/maybe are No.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_financial_aid'] = array(
            'type' => 'text',
            'label' => 'TC:Financial Aid',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_financial_aid',
          );
          /*
           * TPSID has a yes-no-N/A-kinda/maybe, and we just want yes/no.
           * No & N/A & kinda/maybe are No.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_tpsid'] = array(
            'type' => 'text',
            'label' => 'TC:TPSID',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_tpsid',
          );
          /*
           * Dual enrollment is from a selected field option being picked.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_dual_enroll'] = array(
            'type' => 'text',
            'label' => 'TC:Dual Enrollment',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_dual_enroll',
          );
          /*
           * State/Province for Solr facet produces one for full name and
           * one for 2 letter state code. So lets build a new property
           * that's not a text_multiple tm_* in Solr terms.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_state_province'] = array(
            'type' => 'text',
            'label' => 'TC:State/Province',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_state_province',
          );
          /*
           * State/Province for Solr facet produces one for full name and
           * one for 2 letter state code. So lets build a new property
           * that's not a text_multiple tm_* in Solr terms.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_school_type'] = array(
            'type' => 'text',
            'label' => 'TC:School Type',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_school_type',
          );
          /*
           * title is indexed as 'fulltext' which means we can't sort on it in the view.
           * Add another to be indexed as 'string' so we can sort.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_school_title'] = array(
            'type' => 'text',
            'label' => 'TC:School Title',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_property_school_title',
          );
          break;

        case 'resource':
          /*
           * Authors is a Taxonomy Term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_authors'] = array(
            'type' => 'text',
            'label' => 'TC:Term Searchable Authors',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_string_of_authors',
          );
          /*
           * Topics is a Taxonomy Term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_topics'] = array(
            'type' => 'text',
            'label' => 'TC:Term Searchable Topics',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_string_of_topics',
          );
          /*
           * State Related is a Taxonomy Term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_state_related'] = array(
            'type' => 'text',
            'label' => 'TC:Term Searchable State Related',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_string_of_state_related',
          );
          /*
           * Media Types is a Taxonomy Term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_media_types'] = array(
            'type' => 'text',
            'label' => 'TC:Term Searchable Media Types',
            'sanitized' => TRUE,
            'getter callback' => 'tc_program_record_properties_string_of_media_types',
          );
          /*
           * publication types is a taxonomy term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_publication_types'] = array(
            'type' => 'text',
            'label' => 'tc:term searchable publication types',
            'sanitized' => true,
            'getter callback' => 'tc_program_record_properties_string_of_publication_types',
          );
          /*
           * audiences types is a taxonomy term, we want it as a searchable string too.
           */
          $info['node']['bundles'][$bundle_type]['properties']['tc_searchable_term_audiences'] = array(
            'type' => 'text',
            'label' => 'tc:term searchable audiences',
            'sanitized' => true,
            'getter callback' => 'tc_program_record_properties_string_of_audiences',
          );
          /*
          field_resourc_authors
          field_resourc_topics
          field_resourc_state_related
          field_resourc_media_types
          field_resourc_publication_types
          field_resource_audiences
          */
          break;

        case 'tc_events':
          /*
          field_event_cal_categories
          field_resourc_topics
          */
          break;

        case 'page':
          /*
          field_resourc_topics
          */
          break;

        case 'article':
          /*
          field_resourc_topics
          */
          break;

        case 'tc_learn':
          /*
          field_resourc_topics
          */
          break;

      }
    }
  }
}

/**
 * We need a list of Yes/No for Housing.
 * There is a N/A option alogn with yes/no that we are not interested in
 * filtering on in search, so Yes = Yes, everything else  = No.
 *
 * This is a callback from hook_property_entity_info_alter().
 *
 * @param object $item
 *    Node  - A Program Record CT.
 *
 * @return string
 *    'Yes' or 'No'.
 */
function tc_program_record_properties_property_housing($item) {

  if (array_key_exists('field_prog_housing_y_n', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_prog_housing_y_n)) {
      if ($item->field_prog_housing_y_n[LANGUAGE_NONE][0]['value']== "Yes") {
        return("Yes");
      }
      else {
        return("No");
      }
    }
  }
  // will be N/A
  return "No";
}

/**
 * We need a list of Yes/No for Financial Aid.
 *
 * There is a N/A option along with TPSID 2015-2020/TPSID 2010-2015/no that
 * we are not interested in filtering on in search.
 * So Yes = Yes, everything else  = No.
 * Also there are a couple of year range specific answers options for financial aid
 * those are also No.
 *
 * This is a callback from hook_property_entity_info_alter().
 *
 * @param object $item
 *    Node  - A Program Record CT.
 *
 * @return string
 *    'Yes' or 'No'.
 */
function tc_program_record_properties_property_financial_aid($item) {

  if (array_key_exists('field_prog_ctp_y_n', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_prog_ctp_y_n)) {
      if ($item->field_prog_ctp_y_n[LANGUAGE_NONE][0]['value']== "Yes") {
        return("Yes");
      }
      else {
        return("No");
      }
    }
  }
  // will be N/A
  return "No";

}

function tc_program_record_properties_property_alpha_sort_title($item) {
  return $item->title;
}

function tc_program_record_properties_property_sort_created_date($item) {
  return $item->created;
}

/**
 * We need a list of Yes/No for TPSID.
 *
 * There is a N/A option along with TPSID 2015-2020/TPSID 2010-2015/no that
 * we are not interested in filtering on in search.
 * So Yes = Yes, everything else  = No.
 * Also there are a couple of year range specific answers options for financial aid
 * those are also No.
 * So TPSID 2015-2020 is currently YES. Btw after 2020 when there is a new
 * (im guessing) TPSID 2020-2025 value added we'll need to update this function.
 *
 * This is a callback from hook_property_entity_info_alter().
 *
 * @param $item
 * @return string
 */
function tc_program_record_properties_property_tpsid($item) {

  if (array_key_exists('field_prog_is_was_tpsid', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_prog_is_was_tpsid)) {
      if ($item->field_prog_is_was_tpsid[LANGUAGE_NONE][0]['value']== "TPSID 2015-2020") {
        return("Yes");
      }
      else {
        return("No");
      }
    }
  }
  // will be N/A
  return "No";
}


/**
 * Does the school allow dual enrollment?
 *
 * This is a callback from hook_property_entity_info_alter().
 *
 * @param $item
 * @return string
 */
function tc_program_record_properties_property_dual_enroll($item) {

  if (array_key_exists('field_prog_hs_coll', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_prog_hs_coll)) {

      // If there are 2 values checked.
      if (array_key_exists('1', ($item->field_prog_hs_coll[LANGUAGE_NONE]))) {
        if (($item->field_prog_hs_coll[LANGUAGE_NONE][0]['value'] == "Are still enrolled in high school") ||
          ($item->field_prog_hs_coll[LANGUAGE_NONE][1]['value'] == "Are still enrolled in high school")
        ) {
          return ("Yes");
        }
        else {
          return ("No");
        }
      }
      // If there is only 1 value checked.
      else if (array_key_exists('0', ($item->field_prog_hs_coll[LANGUAGE_NONE]))) {
        if ($item->field_prog_hs_coll[LANGUAGE_NONE][0]['value'] == "Are still enrolled in high school") {
          return ("Yes");
        }
        else {
          return ("No");
        }
      }
      // If none are checked.
      else {
        return ("No");
      }

    }
  }
  // will be N/A
  return "No";
}

/**
 * What is the state/province.
 *
 * This is a callback from hook_property_entity_info_alter().
 * Solr state facet returns state name and state code in the list of facets,
 * we just want state name.
 *
 * @param $item
 * @return string
 */
function tc_program_record_properties_property_state_province($item) {

  if (array_key_exists('field_address', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_address)) {
     return tc_program_record_properties_get_state_province_name($item->field_address[LANGUAGE_NONE][0]['administrative_area']);
    }
  }
  // will be N/A
  return "Unknown";
}

/**
 * What is the School Type?
 *
 * This is a callback from hook_property_entity_info_alter().
 * Solr school type facet returns school type name and school type code in
 * the list of facets, we just want school type name.
 *
 * @param $item
 * @return string
 */
function tc_program_record_properties_property_school_type($item) {

  if (array_key_exists('field_prog_type_of_school', $item)) {
    if (array_key_exists(LANGUAGE_NONE, $item->field_prog_type_of_school)) {
      $x = $item->field_prog_type_of_school[LANGUAGE_NONE][0]['value'];
      if ($x == "\\N") {
        $x = "Other";
      }
      return $x;
    }
  }
  // will be N/A
  return "Other";
}

/**
 * Add another title.
 * Node title is indexed as 'fulltext' which breaks views sorting on title.
 * Add another title to be indexed as 'string' so we can sort in views.
 *
 * @param $item
 * @return string
 */
function tc_program_record_properties_property_school_title($item) {
  if (array_key_exists('title', $item)) {
    return $item->title;
  }
}

function tc_program_record_properties_get_state_province_name($abbreviation) {
  $states_provinces = array(
    'AL' => 'Alabama',
    'AK' => 'Alaska',
    'AZ' => 'Arizona',
    'AR' => 'Arkansas',
    'CA' => 'California',
    'CO' => 'Colorado',
    'CT' => 'Connecticut',
    'DE' => 'Delaware',
    'FL' => 'Florida',
    'GA' => 'Georgia',
    'HI' => 'Hawaii',
    'ID' => 'Idaho',
    'IL' => 'Illinois',
    'IN' => 'Indiana',
    'IA' => 'Iowa',
    'KS' => 'Kansas',
    'KY' => 'Kentucky',
    'LA' => 'Louisiana',
    'ME' => 'Maine',
    'MD' => 'Maryland',
    'MA' => 'Massachusetts',
    'MI' => 'Michigan',
    'MN' => 'Minnesota',
    'MS' => 'Mississippi',
    'MO' => 'Missouri',
    'MT' => 'Montana',
    'NE' => 'Nebraska',
    'NV' => 'Nevada',
    'NH' => 'New Hampshire',
    'NJ' => 'New Jersey',
    'NM' => 'New Mexico',
    'NY' => 'New York',
    'NC' => 'North Carolina',
    'ND' => 'North Dakota',
    'OH' => 'Ohio',
    'OK' => 'Oklahoma',
    'OR' => 'Oregon',
    'PA' => 'Pennsylvania',
    'RI' => 'Rhode Island',
    'SC' => 'South Carolina',
    'SD' => 'South Dakota',
    'TN' => 'Tennessee',
    'TX' => 'Texas',
    'UT' => 'Utah',
    'VT' => 'Vermont',
    'VA' => 'Virginia',
    'WA' => 'Washington',
    'WV' => 'West Virginia',
    'WI' => 'Wisconsin',
    'WY' => 'Wyoming',
    'DC' => 'District of Columbia',
    'AS' => 'American Samoa',
    'GU' => 'Guam',
    'MP' => 'Northern Mariana Islands',
    'PR' => 'Puerto Rico',
    'UM' => 'United States Minor Outlying Islands',
    'VI' => 'Virgin Islands, U.S.',
    //CANADIAN PROVINCES
    'AB' => 'Alberta',
    'BC' => 'British Columbia',
    'MB' => 'Manitoba',
    'NB' => 'New Brunswick',
    'NL' => 'Newfoundland and Labrador',
    'NS' => 'Nova Scotia',
    'NT' => 'Northwest Territories',
    'NU' => 'Nunavut',
    'ON' => 'Ontario',
    'PE' => 'Prince Edward Island',
    'QC' => 'Quebec',
    'SK' => 'Saskatchewan',
    'YT' => 'Yukon',
  );
  return $states_provinces[$abbreviation];
}

/**
 * Build string of all taxonomy term names with space separation.
 * @param array $term_array
 *
 * @return string of all terms names.
 */
function tc_program_record_get_list_of_terms_as_string(array $term_array) {
  $name_list = '';
  foreach ($term_array as $value) {
    $term = taxonomy_term_load($value['tid']);
    if ($term != FALSE) {
      $name_list .= ' ' . $term->name;
    }
  }

  dd($name_list);
  return $name_list;
}

/**
 * produce a string for searching from taxonomy terms.
 * (resourc_authors)
 * @param $item
 *
 * @return string of all author names.
 */
function tc_program_record_properties_string_of_authors($item) {
  if (property_exists($item, "field_resourc_authors")) {
    if (sizeof($item->field_resourc_authors) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resourc_authors[LANGUAGE_NONE]);
    }
  }
  return "";
}

/**
 * produce a string for searching from taxonomy terms.
 * (resourc_topics)
 * @param $item
 *
 * @return string of all topics.
 */
function tc_program_record_properties_string_of_topics($item) {
  if (property_exists($item, "field_resourc_topics")) {
    if (sizeof($item->field_resourc_topics) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resourc_topics[LANGUAGE_NONE]);
    }
  }
  return "";
}

/**
 * produce a string for searching from taxonomy terms.
 * (state_related)
 * @param $item
 *
 * @return string of all state related values.
 */
function tc_program_record_properties_string_of_state_related($item) {
  if (property_exists($item, "field_resourc_state_related")) {
    if (sizeof($item->field_resourc_state_related) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resourc_state_related[LANGUAGE_NONE]);
    }
  }
  return "";
}

/**
 * produce a string for searching from taxonomy terms.
 * (media_types)
 * @param $item
 *
 * @return string of all state related values.
 */
function tc_program_record_properties_string_of_media_types($item) {
  if (property_exists($item, "field_resourc_media_types")) {
    if (sizeof($item->field_resourc_media_types) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resourc_media_types[LANGUAGE_NONE]);
    }
  }
  return "";
}

/**
 * produce a string for searching from taxonomy terms.
 * (media_types)
 * @param $item
 *
 * @return string of all state related values.
 */
function tc_program_record_properties_string_of_publication_types($item) {
  if (property_exists($item, "field_resourc_publication_date")) {
    if (sizeof($item->field_resourc_publication_date) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resourc_publication_date[LANGUAGE_NONE]);
    }
  }
  return "";
}

/**
 * produce a string for searching from taxonomy terms.
 * (audiences)
 * @param $item
 *
 * @return string of all state related values.
 */
function tc_program_record_properties_string_of_audiences($item) {
  if (property_exists($item, "field_resource_audiences")) {
    if (sizeof($item->field_resource_audiences) > 0) {
      return tc_program_record_get_list_of_terms_as_string($item->field_resource_audiences[LANGUAGE_NONE]);
    }
  }
  return "";
}
