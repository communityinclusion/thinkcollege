<?php

/**
 * @file
 * Custom facets layouts Using Bootstrap buttons and Badges.
 */

/**
 * Implements hook_facetapi_widgets().
 */
function tc_custom_facets_facetapi_widgets() {
  return array(
    'facetapi_nested_links' => array(
      'handler' => array(
        'label' => t('Nested Links'),
        'class' => 'FacetapiWidgetNestedLinks',
        'query types' => array('term'),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tc_custom_facets_theme() {
  return array(

    'tc_custom_facets_item_list__nested_facet' => array(
//      'render element' => 'element',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
        'childof' => null),
    ),

    'facetapi_nested_links_inactive' => array(
      'variables' => array(
        'text' => NULL,
        'path' => NULL,
        'options' => array(),
        'count' => 0,
      ),
      'file' => 'tc_custom_facets_facetapi_nested_links.theme.inc',
    ),

    'facetapi_nested_links_active' => array(
      'variables' => array(
        'text' => NULL,
        'path' => NULL,
        'options' => array(),
      ),
      'file' => 'tc_custom_facets_facetapi_nested_links.theme.inc',
    ),

  );
}

/**
 * Implements hook_init().
 */
function tc_custom_facets_init() {
  //drupal_add_css(drupal_get_path('module', 'facetapi_bootstrap_button') . "/css/facetapi_bootstrap_button.css");
}



/**
 * Returns HTML for a list or nested list of items.
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of items to be displayed in the list. If an item is a
 *     string, then it is used as is. If an item is an array, then the "data"
 *     element of the array is used as the contents of the list item. If an item
 *     is an array with a "children" element, those children are displayed in a
 *     nested list. All other elements are treated as attributes of the list
 *     item element.
 *   - title: The title of the list.
 *   - type: The type of list to return (e.g. "ul", "ol").
 *   - attributes: The attributes applied to the list element.
 */
function theme_tc_custom_facets_item_list__nested_facet($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];
  $childof = $variables['childof'];

  dsm("freeeeeed");
  // Only output the list container and title, if there are any list items.
  // Check to see whether the block title exists before adding a header.
  // Empty headers are not semantic and present accessibility challenges.
  $parent_attribute = '';
  if ($childof != null) {
    $parent_attribute = 'child-of-' . $childof;
  }
  $output = '<div class="item-list ' . $parent_attribute .'">';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $counter=>$item) {
      $attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_tc_custom_facets_item_list__nested_facet(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes, 'childof' => $counter));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  $output .= '</div>';
  return $output;
}

